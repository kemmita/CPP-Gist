

#include <iostream>
using namespace std;

class Animal {
private:
    string name;

public:
    Animal(){
        cout<<"Animal Created!"<<endl;
    }
    Animal(const Animal& other):
    name(other.name){
        cout <<"Animal created by coping!"<<endl;
    }
    ~Animal(){}

    void setName(string name) {
        this->name = name;
    };
    
    //as you can see below, we can make whole methods constant by adding the keyword const after the round brackets. 
    void speak() const {
        cout << "My name is : " << name << endl;
    }

};

int main(int argc, char** argv) {
//below is the way we would call on a method in Java but instead of a dot, we are using an arrow, we have seen already that we can call on a method without a pointer, but it is not as powerful as we will soon see.
    Animal *pBear = new Animal();
    pBear -> setName("Rurik!");
    pBear -> speak();
    delete pBear;
//above we use delete which calls on our destructor because unlike in Java, c++ will not automatically get rid of your new method created so it is best practice to delete the new method pointer once done with it.
    return  0;
}

